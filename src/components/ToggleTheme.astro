<a class="select-none" title="Toggle dark mode" id="toggle-dark">
  <div i-ri-sun-line dark:i-ri-moon-line>hello</div>
</a>

<script>
  function nextTick(): Promise<void> {
    return Promise.resolve()
  }

  function toggleDark(event: MouseEvent): void {
    const startViewTransition = document.startViewTransition()
    const isPrefersReducedMotion = window.matchMedia(
      '(prefers-reduced-motion: reduce)'
    ).matches
    const isAppearanceTransition =
      startViewTransition && !isPrefersReducedMotion

    if (!isAppearanceTransition) {
      const isDark = document.documentElement.classList.toggle('dark')
      const value = isDark ? 'dark' : 'light'
      localStorage.setItem('theme', value)
      return
    }

    const x = event.clientX
    const y = event.clientY
    const endRadius = Math.hypot(
      Math.max(x, innerWidth - x),
      Math.max(y, innerHeight - y)
    )
    const transition = document.startViewTransition(async () => {
      const isDark = document.documentElement.classList.toggle('dark')
      const value = isDark ? 'dark' : 'light'
      localStorage.setItem('theme', value)
      await nextTick()
    })
    transition.ready.then(() => {
      const clipPath = [
        `circle(0px at ${x}px ${y}px)`,
        `circle(${endRadius}px at ${x}px ${y}px)`,
      ]
      document.documentElement.animate(
        {
          clipPath: document.documentElement.classList.contains('dark')
            ? [...clipPath].reverse()
            : clipPath,
        },
        {
          duration: 400,
          easing: 'ease-out',
          pseudoElement: document.documentElement.classList.contains('dark')
            ? '::view-transition-old(root)'
            : '::view-transition-new(root)',
        }
      )
    })
  }

  function switchTheme(): void {
    document
      .getElementById('toggle-dark')!
      .addEventListener('click', (event) => {
        toggleDark(event)
      })
  }

  switchTheme()

  document.addEventListener('astro:after-swap', () => {
    switchTheme()
  })
</script>
